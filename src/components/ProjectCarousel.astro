---
// MiniProjectsCarousel.astro
const projects = [
  {
    id: 1,
    title: "Virtual Assistant (in progress...)",
    tech: "Python, PostgreSQL, Docker, Alembic",
    url: "https://github.com/markush0f/generator-archinfra",
    image: "projects/assistant.png",
  },
  {
    id: 2,
    title: "Impostor",
    tech: "FastAPI, React, Vite, TailwindCSS",
    url: "https://github.com/markush0f/impostor-game",
    image: "projects/impostor.png",
  },
  {
    id: 3,
    title: "TrainTrack",
    tech: "VueJS, Django, MySQL, TailwindCSS",
    url: "https://github.com/markush0f/traintrack",
    image: "projects/train-track.png",
  },
];
---

<div class="w-full max-w-xs md:max-w-sm lg:max-w-md mx-auto">
  <div class="relative">
    <h2 class="text-base md:text-lg font-semibold pb-2">More projects...</h2>
    <div
      class="carousel-container relative h-40 sm:h-44 md:h-48 lg:h-52 rounded-3xl overflow-hidden cursor-pointer group"
      id="carouselContainer"
    >
      {
        projects.map((project, index) => (
          <div
            class={`carousel-slide absolute inset-0 transition-all duration-300 rounded-3xl ${index === 0 ? "opacity-100" : "opacity-0"}`}
            data-index={index}
            data-url={project.url}
          >
            <img
              src={project.image}
              alt={project.title}
              class="absolute inset-0 w-full h-full object-cover transition-transform duration-500 group-hover:scale-105 rounded-3xl"
            />

            <div class="rounded-3xl absolute inset-0 bg-gradient-to-t from-black/70 via-black/20 to-transparent pointer-events-none transition-all duration-300 group-hover:from-black/80" />

            <div class="absolute bottom-0 left-0 right-0 p-2.5 md:p-3 lg:p-4 text-white pointer-events-none transition-transform duration-300 group-hover:translate-y-0 translate-y-1">
              <h3 class="text-xs md:text-sm lg:text-base font-medium">
                {project.title}
              </h3>
              <p class="text-[10px] md:text-xs text-white/80 mt-0.5">
                {project.tech}
              </p>
            </div>
          </div>
        ))
      }

      <div
        class="absolute inset-0 border-2 border-white/0 group-hover:border-white/20 rounded transition-all duration-300 pointer-events-none rounded-3xl"
      >
      </div>
    </div>

    <button
      id="prevBtn"
      class="absolute left-1 md:left-1.5 top-1/2 -translate-y-1/2 text-white/80 hover:text-white transition-all duration-300 bg-black/30 hover:bg-black/60 hover:scale-110 rounded-full p-0.5 md:p-1 z-10"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="20"
        height="20"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="w-3.5 h-3.5 md:w-4 md:h-4"
      >
        <path d="m15 18-6-6 6-6"></path>
      </svg>
    </button>

    <button
      id="nextBtn"
      class="absolute right-1 md:right-1.5 top-1/2 -translate-y-1/2 text-white/80 hover:text-white transition-all duration-300 bg-black/30 hover:bg-black/60 hover:scale-110 rounded-full p-0.5 md:p-1 z-10"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="20"
        height="20"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="w-3.5 h-3.5 md:w-4 md:h-4"
      >
        <path d="m9 18 6-6-6-6"></path>
      </svg>
    </button>
  </div>

  <div class="flex justify-center gap-1 mt-2" id="indicators">
    {
      projects.map((_, index) => (
        <button
          class={`indicator h-0.5 md:h-1 rounded-full transition-all duration-300 hover:scale-150 ${index === 0 ? "w-3 md:w-4 bg-gray-800" : "w-0.5 md:w-1 bg-gray-300 hover:bg-gray-500"}`}
          data-index={index}
        />
      ))
    }
  </div>
</div>

<script>
  let currentIndex = 0;
  const slides = document.querySelectorAll(".carousel-slide");
  const indicators = document.querySelectorAll(".indicator");
  const container = document.getElementById("carouselContainer");
  const totalSlides = slides.length;

  function updateCarousel() {
    slides.forEach((slide, index) => {
      slide.classList.toggle("opacity-100", index === currentIndex);
      slide.classList.toggle("opacity-0", index !== currentIndex);
    });

    indicators.forEach((indicator, index) => {
      if (index === currentIndex) {
        indicator.classList.remove("w-0.5", "md:w-1", "bg-gray-300");
        indicator.classList.add("w-3", "md:w-4", "bg-gray-800");
      } else {
        indicator.classList.remove("w-3", "md:w-4", "bg-gray-800");
        indicator.classList.add("w-0.5", "md:w-1", "bg-gray-300");
      }
    });
  }

  // Click en el contenedor para redirigir
  container?.addEventListener("click", (e) => {
    // Evitar clicks en los botones
    const target = e.target as HTMLElement;
    if (target.closest("#prevBtn") || target.closest("#nextBtn")) {
      return;
    }

    const currentSlide = slides[currentIndex] as HTMLElement;
    const url = currentSlide.dataset.url;
    if (url) {
      window.open(url, "_blank");
    }
  });

  document.getElementById("prevBtn")?.addEventListener("click", (e) => {
    e.stopPropagation();
    currentIndex = (currentIndex - 1 + totalSlides) % totalSlides;
    updateCarousel();
  });

  document.getElementById("nextBtn")?.addEventListener("click", (e) => {
    e.stopPropagation();
    currentIndex = (currentIndex + 1) % totalSlides;
    updateCarousel();
  });

  indicators.forEach((indicator, index) => {
    indicator.addEventListener("click", () => {
      currentIndex = index;
      updateCarousel();
    });
  });
</script>
