---
// ProjectCarousel.astro
interface Project {
  id: number;
  title: string;
  description: string;
  image: string;
  tags: string[];
  link?: string;
}

const projects: Project[] = [
  {
    id: 1,
    title: "E-commerce Platform",
    description: "Plataforma completa de comercio electrónico con pasarela de pagos integrada",
    image: "https://images.unsplash.com/photo-1557821552-17105176677c?w=800&h=600&fit=crop",
    tags: ["React", "Node.js", "PostgreSQL"],
    link: "#"
  },
  {
    id: 2,
    title: "Dashboard Analytics",
    description: "Sistema de análisis de datos en tiempo real con visualizaciones interactivas",
    image: "https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=800&h=600&fit=crop",
    tags: ["Vue.js", "D3.js", "Firebase"],
    link: "#"
  },
  {
    id: 3,
    title: "Mobile App Social",
    description: "Aplicación móvil de red social con funciones de mensajería instantánea",
    image: "https://images.unsplash.com/photo-1512941937669-90a1b58e7e9c?w=800&h=600&fit=crop",
    tags: ["React Native", "Express", "MongoDB"],
    link: "#"
  },
  {
    id: 4,
    title: "CMS Headless",
    description: "Sistema de gestión de contenidos desacoplado con API GraphQL",
    image: "https://images.unsplash.com/photo-1460925895917-afdab827c52f?w=800&h=600&fit=crop",
    tags: ["Next.js", "GraphQL", "Strapi"],
    link: "#"
  }
];
---

<div class="relative w-full max-w-2xl mx-auto">
  <!-- Carrusel Container -->
  <div class="overflow-hidden">
    <div id="carousel-track" class="flex transition-transform duration-700 ease-out">
      {projects.map((project) => (
        <div class="min-w-full">
          <div class="grid md:grid-cols-2 gap-6 md:gap-8">
            <!-- Imagen -->
            <div class="relative h-96 md:h-[500px] overflow-hidden group">
              <img 
                src={project.image} 
                alt={project.title}
                class="w-full h-full object-cover opacity-50 group-hover:opacity-30 transition-opacity duration-500"
              />
              <div class="absolute inset-0 bg-gradient-to-t from-black via-transparent to-transparent"></div>
            </div>
            
            <!-- Contenido -->
            <div class="flex flex-col justify-center">
              <h3 class="text-2xl md:text-3xl font-light text-white mb-3 tracking-tight">
                {project.title}
              </h3>
              <p class="text-neutral-400 mb-8 leading-relaxed font-light text-lg">
                {project.description}
              </p>
              
              <!-- Tags -->
              <div class="flex flex-wrap gap-4 mb-8">
                {project.tags.map((tag) => (
                  <span class="text-xs text-neutral-500 font-mono tracking-wider uppercase">
                    {tag}
                  </span>
                ))}
              </div>
              
              <!-- Botón -->
              {project.link && (
                <a 
                  href={project.link}
                  class="inline-flex items-center text-sm text-neutral-400 hover:text-white transition-colors duration-300 font-light tracking-wide group"
                >
                  Ver proyecto
                  <svg class="w-4 h-4 ml-2 group-hover:translate-x-1 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M17 8l4 4m0 0l-4 4m4-4H3"/>
                  </svg>
                </a>
              )}
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>

  <!-- Botones de navegación -->
  <button 
    id="prev-btn"
    class="absolute left-4 md:left-8 top-1/2 -translate-y-1/2 w-10 h-10 flex items-center justify-center text-neutral-600 hover:text-neutral-300 transition-colors duration-300 z-10"
    aria-label="Proyecto anterior"
  >
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M15 19l-7-7 7-7"/>
    </svg>
  </button>
  
  <button 
    id="next-btn"
    class="absolute right-4 md:right-8 top-1/2 -translate-y-1/2 w-10 h-10 flex items-center justify-center text-neutral-600 hover:text-neutral-300 transition-colors duration-300 z-10"
    aria-label="Proyecto siguiente"
  >
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M9 5l7 7-7 7"/>
    </svg>
  </button>

  <!-- Indicadores -->
  <div class="flex justify-center gap-2 mt-12">
    {projects.map((_, index) => (
      <button
        class="carousel-indicator w-12 h-0.5 bg-neutral-800 hover:bg-neutral-600 transition-colors duration-300"
        data-index={index}
        aria-label={`Ir al proyecto ${index + 1}`}
      />
    ))}
  </div>
</div>

<script>
  const track = document.getElementById('carousel-track') as HTMLElement;
  const prevBtn = document.getElementById('prev-btn') as HTMLButtonElement;
  const nextBtn = document.getElementById('next-btn') as HTMLButtonElement;
  const indicators = document.querySelectorAll('.carousel-indicator') as NodeListOf<HTMLButtonElement>;
  
  let currentIndex = 0;
  const totalSlides = indicators.length;

  function updateCarousel(): void {
    track.style.transform = `translateX(-${currentIndex * 100}%)`;
    
    indicators.forEach((indicator, index) => {
      if (index === currentIndex) {
        indicator.classList.remove('bg-neutral-800');
        indicator.classList.add('bg-neutral-300');
      } else {
        indicator.classList.remove('bg-neutral-300');
        indicator.classList.add('bg-neutral-800');
      }
    });
  }

  function goToSlide(index: number): void {
    currentIndex = index;
    updateCarousel();
  }

  function nextSlide(): void {
    currentIndex = (currentIndex + 1) % totalSlides;
    updateCarousel();
  }

  function prevSlide(): void {
    currentIndex = (currentIndex - 1 + totalSlides) % totalSlides;
    updateCarousel();
  }

  prevBtn.addEventListener('click', prevSlide);
  nextBtn.addEventListener('click', nextSlide);

  indicators.forEach((indicator) => {
    indicator.addEventListener('click', () => {
      const index = parseInt(indicator.dataset.index || '0');
      goToSlide(index);
    });
  });

  // Inicializar
  updateCarousel();
</script>